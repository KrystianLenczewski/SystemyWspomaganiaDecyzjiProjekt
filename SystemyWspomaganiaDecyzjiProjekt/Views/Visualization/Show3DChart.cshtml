@model SystemyWspomaganiaDecyzjiProjekt.Models.ViewModels.Chart3DVm


<script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://code.highcharts.com/highcharts-3d.js"></script>
<script src="https://code.highcharts.com/modules/exporting.js"></script>
<script src="https://code.highcharts.com/modules/export-data.js"></script>
<script src="https://code.highcharts.com/modules/accessibility.js"></script>

<figure class="highcharts-figure">
    <div id="container"></div>
</figure>

<script>
        // Give the points a 3D feel by adding a radial gradient
        Highcharts.setOptions({
        colors: Highcharts.getOptions().colors.map(function (color) {
        return {
        radialGradient: {
            cx: 0.4,
            cy: 0.3,
            r: 0.5
        },
        stops: [
        [0, color],
        [1, Highcharts.color(color).brighten(-0.2).get('rgb')]
        ]
        };
        })
        });

        // Set up the chart
        var chart = new Highcharts.Chart({
        chart: {
            renderTo: 'container',
            margin: 100,
            type: 'scatter3d',
            animation: false,
            options3d: {
            enabled: true,
            alpha: 10,
            beta: 30,
            depth: 250,
            viewDistance: 5,
            fitToPlot: false,
            frame: {
                bottom: { size: 1, color: 'rgba(0,0,0,0.02)' },
                back: { size: 1, color: 'rgba(0,0,0,0.04)' },
                side: { size: 1, color: 'rgba(0,0,0,0.06)' }
            }
        }
        },
        title: {
            text: 'Draggable box'
        },
        subtitle: {
            text: 'Click and drag the plot area to rotate in space'
        },
        plotOptions: {
        scatter: {
            width: 100,
            height: 100,
            depth: 10
        }
        },
        yAxis: {
            text: 'EloY',
            title: {
                enabled: true,
                text: '@Model.YColumnName',
                style: {
                    fontWeight: 'normal'
                }
            }
        },
        xAxis: {

            gridLineWidth: 1,
            title: {
                enabled: true,
                text: '@Model.XColumnName',
                style: {
                    fontWeight: 'normal'
                }
            }
        },
        zAxis: {
            showFirstLabel: false,
             title: {
                enabled: true,
                text: '@Model.ZColumnName',
                style: {
                    fontWeight: 'normal'
                }
            }
        },
        legend: {
            enabled: false
        },
            series: [@foreach (var item in Model.ClassColorMapping) 
            {

                <text>
                    {
                        name: 'Data',
                        colorByPoint: false,
                        color: '@item.Value',
                        accessibility: {
                            exposeAsGroupOnly: true
                        },
                        data: [   @foreach (var point3D in Model.ClassPoints.Where(x => x.Class == item.Key))
                        {
                            <text>
                                [@point3D.X.ToString("0.00").Replace(',','.'), @point3D.Y.ToString("0.00").Replace(',','.'), @point3D.Z.ToString("0.00").Replace(',','.')],
                            </text>
                        }]
                    },
                </text>
            }

        ]
        });


        // Add mouse and touch events for rotation
        (function (H) {
        function dragStart(eStart) {
        eStart = chart.pointer.normalize(eStart);

        var posX = eStart.chartX,
        posY = eStart.chartY,
        alpha = chart.options.chart.options3d.alpha,
        beta = chart.options.chart.options3d.beta,
        sensitivity = 5,  // lower is more sensitive
        handlers = [];

        function drag(e) {
        // Get e.chartX and e.chartY
        e = chart.pointer.normalize(e);

        chart.update({
        chart: {
        options3d: {
        alpha: alpha + (e.chartY - posY) / sensitivity,
        beta: beta + (posX - e.chartX) / sensitivity
        }
        }
        }, undefined, undefined, false);
        }

        function unbindAll() {
        handlers.forEach(function (unbind) {
        if (unbind) {
        unbind();
        }
        });
        handlers.length = 0;
        }

        handlers.push(H.addEvent(document, 'mousemove', drag));
        handlers.push(H.addEvent(document, 'touchmove', drag));


        handlers.push(H.addEvent(document, 'mouseup', unbindAll));
        handlers.push(H.addEvent(document, 'touchend', unbindAll));
        }
        H.addEvent(chart.container, 'mousedown', dragStart);
        H.addEvent(chart.container, 'touchstart', dragStart);
        }(Highcharts));

</script>

<style>
    .highcharts-figure, .highcharts-data-table table {
        min-width: 410px;
        max-width: 800px;
        margin: 0 auto;
    }

    #container {
        height: 600px;
        width: 1000px;
    }

    .highcharts-data-table table {
        font-family: Verdana, sans-serif;
        border-collapse: collapse;
        border: 1px solid #EBEBEB;
        margin: 10px auto;
        text-align: center;
        width: 100%;
        max-width: 500px;
    }

    .highcharts-data-table caption {
        padding: 1em 0;
        font-size: 1.2em;
        color: #555;
    }

    .highcharts-data-table th {
        font-weight: 600;
        padding: 0.5em;
    }

    .highcharts-data-table td, .highcharts-data-table th, .highcharts-data-table caption {
        padding: 0.5em;
    }

    .highcharts-data-table thead tr, .highcharts-data-table tr:nth-child(even) {
        background: #f8f8f8;
    }

    .highcharts-data-table tr:hover {
        background: #f1f7ff;
    }
</style>